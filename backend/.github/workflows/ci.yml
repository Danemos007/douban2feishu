name: CI Pipeline

on:
  pull_request:
    branches:
      - main

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        working-directory: ./backend

      - name: TypeScript compilation check
        run: npx tsc --project tsconfig.check.json
        working-directory: ./backend

      - name: Run tests with coverage (auto-update fixtures)
        run: npm run test:ci
        working-directory: ./backend

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./backend/coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality-gates

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        working-directory: ./backend

      - name: Setup E2E test environment
        run: |
          cat > .env.e2e << EOF
          NODE_ENV=test
          IS_E2E_TEST=true
          USE_MOCK_DOUBAN=true
          USE_MOCK_FEISHU=true
          E2E_TEST_EMAIL=${{ secrets.E2E_TEST_EMAIL || 'e2e-test@example.com' }}
          E2E_TEST_PASSWORD=${{ secrets.E2E_TEST_PASSWORD || 'test-password' }}
          DATABASE_URL=${{ secrets.E2E_DATABASE_URL || 'postgresql://test:test@localhost:5432/d2f_test' }}
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_DB=1
          JWT_SECRET=${{ secrets.E2E_JWT_SECRET || 'test-jwt-secret' }}
          EOF
        working-directory: ./backend

      - name: Setup PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v6
        with:
          database: d2f_test
          port: 5432

      - name: Setup Redis
        uses: shogo82148/actions-setup-redis@v1
        with:
          redis-version: '7.x'

      - name: Run E2E tests
        run: npm run test:e2e
        working-directory: ./backend

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: ./backend/coverage-e2e/
          retention-days: 7
